import depthai as dai

# 1) 파이프라인 생성
pipeline = dai.Pipeline()

# 2) 좌/우 모노 카메라 설정 (스테레오 깊이 생성용)
mono_left = pipeline.createMonoCamera()
mono_left.setBoardSocket(dai.CameraBoardSocket.LEFT)
mono_left.setResolution(dai.MonoCameraProperties.SensorResolution.THE_720_P)

mono_right = pipeline.createMonoCamera()
mono_right.setBoardSocket(dai.CameraBoardSocket.RIGHT)
mono_right.setResolution(dai.MonoCameraProperties.SensorResolution.THE_720_P)

# 3) 스테레오 깊이 모듈
stereo = pipeline.createStereoDepth()
stereo.setConfidenceThreshold(200)
mono_left.out.link(stereo.left)
mono_right.out.link(stereo.right)

# 4) SpatialLocationCalculator로 ROI(Region of Interest) 설정
spatial_calc = pipeline.createSpatialLocationCalculator()
spatial_calc.setWaitForConfigInput(False)

# -- ROI 구성: 프레임 중앙(40%~60%) 영역, 깊이 100mm~3000mm (3m)
cfg = dai.SpatialLocationCalculatorConfigData()
cfg.depthThresholds.lowerThreshold = 100   # 최소 0.1m
cfg.depthThresholds.upperThreshold = 4000  # 최대 3.0m
cfg.roi = dai.Rect(dai.Point2f(0.4, 0.4), dai.Point2f(0.6, 0.6))
spatial_calc.initialConfig.addROI(cfg)

# 5) 깊이 데이터를 SpatialLocationCalculator에 연결
stereo.depth.link(spatial_calc.inputDepth)

# 6) 결과를 호스트로 보내기 위한 XLinkOut
xout = pipeline.createXLinkOut()
xout.setStreamName("spatialData")
spatial_calc.out.link(xout.input)

# 7) 디바이스 실행 및 결과 처리
with dai.Device(pipeline) as device:
    q = device.getOutputQueue(name="spatialData", maxSize=4, blocking=True)
    prev_state = None
    found = False

    print(">>> 시작: 장애물 거리 모니터링 (4m 이하 감지 시 0)")

    while True:
        spatial_packet = q.get()  # 새 데이터 받을 때까지 대기
        spatial_data = spatial_packet.getSpatialLocations()
        if not spatial_data:
            continue

        # 첫 번째(유일) ROI 를 기준으로 Z축 거리(mm) 읽기
        z_mm = spatial_data[0].spatialCoordinates.z
        dist_m = z_mm / 1000.0

        # 4m 이하 감지 시 상태 변경
        if dist_m <= 4.0:
           signal_to_send = '0'
        else:
            signal_to_send = '1'

        # 콘솔 출력 예시
        print(f"Distance: {dist_m:.2f} m  →  prev_state={prev_state!r}, found={found}")

        # (원한다면 이 지점에서 prev_state, found를 다른 로직으로 넘겨 제어할 수 있습니다.)
