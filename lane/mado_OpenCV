import cv2
import numpy as np

NUM_WINDOWS = 35  # 슬라이딩 윈도우 개수 늘림
MAX_SHIFT = 5
MARGIN = 80
MINPIX = 5  # 최소 픽셀 수 완화
VIDEO_PATH = "Highway_Drive.mp4"  # 영상 파일 이름

FRAME_DELAY = 50  # 프레임 간 지연 (ms) → 느리게 출력

def fit_poly(pts, degree=3):
    if len(pts) < degree + 1:
        return np.zeros(degree + 1)
    pts = np.array(pts)
    x = pts[:, 0]
    y = pts[:, 1]
    return np.polyfit(y, x, degree)

def get_histogram_peaks(mask, seg=50):
    h, w = mask.shape
    lower_half = mask[h//2:, :]
    upper_half = mask[:h//2, :]

    # 기존 하단 + 상단 히스토그램을 가중합
    hist_low = np.sum(lower_half, axis=0)
    hist_up = np.sum(upper_half, axis=0)
    hist = hist_low + 0.5 * hist_up   # 상단은 0.5배 가중치

    seg_sum = [np.sum(hist[i:i + seg]) for i in range(0, w, seg)]
    mid = w // 2
    bestL = np.argmax(seg_sum[:mid // seg])
    bestR = np.argmax(seg_sum[mid // seg:]) + mid // seg
    init_xL = (bestL * seg + min(mid, (bestL + 1) * seg)) // 2
    init_xR = (bestR * seg + min(w, (bestR + 1) * seg)) // 2
    return init_xL, init_xR


def main():
    cap = cv2.VideoCapture(VIDEO_PATH)
    if not cap.isOpened():
        print("Failed to open video.")
        return

    src_pts = np.float32([[330,700],[1000,700],[800,600],[520,600]])
    prev_left_x, prev_right_x = -1, -1
    prev_fit_L, prev_fit_R = np.zeros(3), np.zeros(3)
    alpha = 0.875
    has_prev = False
    frame_count = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        H, W = frame.shape[:2]
        dst_pts = np.float32([[0, H], [W, H], [W, 0], [0, 0]])
        M = cv2.getPerspectiveTransform(src_pts, dst_pts)
        bird = cv2.warpPerspective(frame, M, (W, H))

        blur = cv2.GaussianBlur(bird, (3, 3), 0)
        hsv = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV)
        mask_w = cv2.inRange(hsv, (0, 0, 190), (180, 35, 255))
        mask_y = cv2.inRange(hsv, (15, 90, 90), (40, 255, 255))
        mask = cv2.bitwise_or(mask_w, mask_y)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3)))

        if frame_count % 10 == 0:
            cv2.imshow("Binary Mask", mask)

        init_xL, init_xR = get_histogram_peaks(mask)
        if prev_left_x >= 0:
            dL = init_xL - prev_left_x
            if abs(dL) > MAX_SHIFT:
                init_xL = prev_left_x + (MAX_SHIFT if dL > 0 else -MAX_SHIFT)
            dR = init_xR - prev_right_x
            if abs(dR) > MAX_SHIFT:
                init_xR = prev_right_x + (MAX_SHIFT if dR > 0 else -MAX_SHIFT)

        prev_left_x, prev_right_x = init_xL, init_xR
        h, w = mask.shape
        win_h = h // NUM_WINDOWS
        left_x, right_x = init_xL, init_xR
        left_pts, right_pts = [], []

        for i in range(NUM_WINDOWS):
            y_low = h - (i + 1) * win_h
            y_high = h - i * win_h
            xl_lo, xl_hi = max(0, left_x - MARGIN), min(w, left_x + MARGIN)
            xr_lo, xr_hi = max(0, right_x - MARGIN), min(w, right_x + MARGIN)
            nzl, nzr = [], []

            for y in range(y_low, y_high):
                row = mask[y]
                nzl += [(x, y) for x in range(xl_lo, xl_hi) if row[x]]
                nzr += [(x, y) for x in range(xr_lo, xr_hi) if row[x]]

            if len(nzl) > MINPIX:
                left_x = int(np.mean([x for x, _ in nzl]))
            if len(nzr) > MINPIX:
                right_x = int(np.mean([x for x, _ in nzr]))

            left_pts.append((left_x, (y_low + y_high) // 2))
            right_pts.append((right_x, (y_low + y_high) // 2))

        if len(right_pts) < 20 and len(left_pts) > 100:
            mid = w // 2
            right_pts += [(2 * mid - x, y) for x, y in left_pts if 0 < 2 * mid - x < w]

        left_fit = prev_fit_L if len(left_pts) < 8 else (
            alpha * prev_fit_L + (1 - alpha) * fit_poly(left_pts))
        right_fit = prev_fit_R if len(right_pts) < 8 else (
            alpha * prev_fit_R + (1 - alpha) * fit_poly(right_pts))

        prev_fit_L, prev_fit_R = left_fit, right_fit
        has_prev = True

        vis = bird.copy()
        for y in range(0, h, 10):
            lx = int(np.polyval(left_fit, y))
            rx = int(np.polyval(right_fit, y))
            if 0 <= lx < w:
                cv2.circle(vis, (lx, y), 2, (0, 255, 0), -1)
            if 0 <= rx < w:
                cv2.circle(vis, (rx, y), 2, (0, 255, 255), -1)

        cv2.imshow("Smoothed Histogram + Polyfit", vis)
        if cv2.waitKey(FRAME_DELAY) & 0xFF == ord('q'):
            break

        frame_count += 1

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()