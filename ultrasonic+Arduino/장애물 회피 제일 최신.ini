# 웨이포인트기반 장애물 회피
# 현재는 센서 갯수의 한계로 인해 센서 2개로 검증 및 코드 설계 진행 추후 8개의 초음파 센서 중 3개의 센서를 사용해 전방 장애물 감지 및 회피 진행
# 웨이포인트를 따라 주행하다가 장애물이 100cm 이내로 들어오면 좌 우 센서 값을 비교해서 값이 큰 방향으로 조향각 최대 조향각(임의 지정)으로 변경
# 조향각을 수정란 방향의 센서값이 200cm 이하가 될 때 까지 전진하다가 일정거리에 도달하면 정지한 후 조향각을 0으로 초기화 하여 다시 웨이포인트 주행

import serial
import time
import sys
import csv
import os
from datetime import datetime

# 시리얼 포트 설정
serial_port = serial.Serial('COM8', 115200, timeout=1)
time.sleep(2)

# 거리 기준
OBSTACLE_DETECT_THRESHOLD = 100      # 장애물 감지 기준 (cm)
AVOID_TARGET_DISTANCE = 200          # 회피 전진 목표 거리 (조향 방향 센서값 ≤ 200)
AVOID_CONFIRM_COUNT = 5              # 연속 거리 만족 횟수

# 조향각 값 (측정했으나 검증하지 못하여 임의지정)
STEERING_RIGHT = 15
STEERING_LEFT = -15

# 상태 정의
state = "WAYPOINT_FOLLOWING"
avoid_forward_count = 0
steering_direction = 0  # +15 (오른쪽), -15 (왼쪽), 0 (중립)

# 이전 출력 비교용
last_left = None
last_right = None
last_state = None
last_count = None

# CSV 파일 자동 생성
def get_unique_filename(base_name):
    index = 1
    while True:
        filename = f"{base_name}_{index}.csv"
        if not os.path.exists(filename):
            return filename
        index += 1

csv_filename = get_unique_filename("wkddoanf")

# CSV 초기화
with open(csv_filename, mode='w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(["Timestamp", "Left(cm)", "Right(cm)", "State", "SteeringDirection", "AvoidCount"])

def log_to_csv(left, right, state, steering_direction, avoid_count):
    timestamp = datetime.now().isoformat()
    with open(csv_filename, mode='a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, left, right, state, steering_direction, avoid_count])

def get_distances():
    """왼쪽과 오른쪽 거리값 읽어옴"""
    line = None
    while serial_port.in_waiting:
        line = serial_port.readline().decode('utf-8').strip()
    if line:
        try:
            _, left, right = line.split(",")
            return float(left), float(right)
        except ValueError:
            print("거리 파싱 실패:", line)
    return None, None

def print_status(left, right, state, count):
    sys.stdout.write(
        f"\r📏 왼쪽: {left:6.1f} cm | 오른쪽: {right:6.1f} cm | 상태: {state:<20} | 회피 카운트: {count}"
    )
    sys.stdout.flush()

def main():
    global state, avoid_forward_count, steering_direction
    global last_left, last_right, last_state, last_count

    print(f"📄 CSV 파일 저장: {csv_filename}")

    while True:
        left, right = get_distances()
        if left is None or right is None:
            continue

        # 변화가 있을 때만 출력
        if (left != last_left or right != last_right or
            state != last_state or avoid_forward_count != last_count):
            print_status(left, right, state, avoid_forward_count)
            last_left, last_right = left, right
            last_state = state
            last_count = avoid_forward_count

        # CSV 저장
        log_to_csv(left, right, state, steering_direction, avoid_forward_count)

        if state == "WAYPOINT_FOLLOWING":
            if left <= OBSTACLE_DETECT_THRESHOLD or right <= OBSTACLE_DETECT_THRESHOLD:
                print("\n🛑 장애물 감지됨 → 회피 시작")

                if left > right:
                    steering_direction = STEERING_LEFT
                    print("↩️ 왼쪽이 넓음 → 왼쪽으로 조향")
                elif right > left:
                    steering_direction = STEERING_RIGHT
                    print("↪️ 오른쪽이 넓음 → 오른쪽으로 조향")
                else:
                    steering_direction = STEERING_RIGHT
                    print("➡️ 좌우 동일 → 기본적으로 오른쪽으로 조향")

                state = "AVOID_FORWARD"
                avoid_forward_count = 0

        elif state == "AVOID_FORWARD":
            # 조향 방향에 따라 검사할 센서 선택
            if steering_direction == STEERING_LEFT:
                relevant_distance = left
                direction_label = "왼쪽"
            elif steering_direction == STEERING_RIGHT:
                relevant_distance = right
                direction_label = "오른쪽"
            else:
                relevant_distance = 9999

            if relevant_distance <= AVOID_TARGET_DISTANCE:
                avoid_forward_count += 1
                print(f"\n🚗 전진 중... ({direction_label} 거리: {relevant_distance:.1f} cm) → 카운트: {avoid_forward_count}")
                if avoid_forward_count >= AVOID_CONFIRM_COUNT:
                    print("✅ 회피 완료 → 조향각 초기화 및 웨이포인트 복귀")
                    steering_direction = 0
                    state = "WAYPOINT_FOLLOWING"
            else:
                avoid_forward_count = 0

        time.sleep(0.1)

    serial_port.close()

if __name__ == "__main__":
    main()
