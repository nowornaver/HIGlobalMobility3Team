import serial
import time
import sys

# 시리얼 포트 설정
serial_port = serial.Serial('COM8', 9600, timeout=1)
time.sleep(2)

# 거리 기준
OBSTACLE_DETECT_THRESHOLD = 100      # 장애물 감지 기준 (cm)
AVOID_TARGET_DISTANCE = 200          # 회피 전진 목표 (오른쪽 센서값 ≤ 200)
AVOID_CONFIRM_COUNT = 5              # 연속 회피 거리 만족 횟수

# 조향각 값
STEERING_RIGHT = 15
STEERING_LEFT = -15
STEERING_TOLERANCE = 2

# 상태 정의
state = "WAYPOINT_FOLLOWING"
avoid_forward_count = 0
steering_direction = 0

# 이전 값 기록용
last_left = None
last_right = None
last_state = None
last_count = None

def get_distances():
    """왼쪽과 오른쪽 거리값 읽어옴"""
    line = None
    while serial_port.in_waiting:
        line = serial_port.readline().decode('utf-8').strip()

    if line:
        try:
            _, left, right = line.split(",")
            return float(left), float(right)
        except ValueError:
            print("거리 파싱 실패:", line)
    return None, None

def print_status(left, right, state, count):
    sys.stdout.write(
        f"\r📏 왼쪽: {left:6.1f} cm | 오른쪽: {right:6.1f} cm | 상태: {state:<20} | 회피 카운트: {count}"
    )
    sys.stdout.flush()

def main():
    global state, avoid_forward_count, steering_direction
    global last_left, last_right, last_state, last_count

    while True:
        left, right = get_distances()
        if left is None or right is None:
            continue

        # 변화가 있을 때만 출력
        if (left != last_left or right != last_right or
            state != last_state or avoid_forward_count != last_count):
            print_status(left, right, state, avoid_forward_count)
            last_left, last_right = left, right
            last_state = state
            last_count = avoid_forward_count

        if state == "WAYPOINT_FOLLOWING":
            if left <= OBSTACLE_DETECT_THRESHOLD or right <= OBSTACLE_DETECT_THRESHOLD:
                print("\n🛑 장애물 감지됨 → 회피 시작")

                if left > right:
                    steering_direction = STEERING_LEFT
                    print("↩️ 왼쪽이 넓음 → 왼쪽으로 조향")
                else:
                    steering_direction = STEERING_RIGHT
                    print("↪️ 오른쪽이 넓음 → 오른쪽으로 조향")

                state = "AVOID_FORWARD"
                avoid_forward_count = 0

        elif state == "AVOID_FORWARD":
            if right <= AVOID_TARGET_DISTANCE:
                avoid_forward_count += 1
                print(f"\n🚗 전진 중... (오른쪽 거리: {right:.1f} cm) → 카운트: {avoid_forward_count}")
                if avoid_forward_count >= AVOID_CONFIRM_COUNT:
                    print("✅ 회피 완료 → 조향각 초기화 및 웨이포인트 복귀")
                    steering_direction = 0
                    state = "WAYPOINT_FOLLOWING"
            else:
                avoid_forward_count = 0

        time.sleep(0.1)

    serial_port.close()

if __name__ == "__main__":
    main()
